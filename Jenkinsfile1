 pipeline {
     agent any
     tools {
         jdk 'jdk17'
         maven 'maven3'
     }
     environment {
         SCANNER_HOME = tool 'sonar-scanner'
     }
     stages {
         stage('Git Checkout') {
             steps {
                 git branch: 'main', credentialsId: 'github', url: 'https://github.com/shubzz-t/Blogging_App_Java.git'
             }
         }
         stage('Compile') {
             steps {
                 sh "mvn compile"
             }
         }
         stage('Test') {
             steps {
                 sh "mvn test"
             }
         }
         stage('File System Scan') {
             steps {
                 sh "trivy fs --format table -o trivy-fs-report.html ."
             }
         }
         stage('SonarQube Analysis') {
             steps {
                 withSonarQubeEnv('sonar-server') {
                     sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Blogging-App -Dsonar.projectKey=Blogging-App \
                             -Dsonar.java.binaries=target '''
                 }
             }
         }
         stage('Quality Gate') {
             steps {
                 script {
                     waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                 }
             }
         }
         stage('Build') {
             steps {
                 sh "mvn package"
             }
         }
         stage('Publish To Nexus') {
             steps {
                 withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                     sh "mvn deploy"
                 }
             }
         }
         stage('Build & Tag Docker Image') {
             steps {
                 script {
                     withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                         sh "docker build -t shubzz/blogging-app:latest ."
                     }
                 }
             }
         }
         stage('Docker Image Scan') {
             steps {
                 sh "trivy image --format table -o trivy-image-report.html shubzz/blogging-app:latest "
             }
         }

         stage('Push Docker Image') {
             steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                             sh "docker push shubzz/blogging-app:latest"
                     }
                }
             }
         }

         stage('Deploy to K8S'){
             steps{
                 withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://99A9506919BFC33E6952F062312B02F4.sk1.ap-south-1.eks.amazonaws.com') {
                     sh "kubectl apply -f deployment-service.yml"
                     sh "sleep 10"
                 }
             }
         }

         stage('Verify Deployment'){
             steps{
                 withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://99A9506919BFC33E6952F062312B02F4.sk1.ap-south-1.eks.amazonaws.com') {
                     sh "kubectl get pods -n webapps"
                     sh "kubectl get svc -n webapps"
                 }
             }
         }

     }
     post {
         always {
             script {
                 def jobName = env.JOB_NAME
                 def buildNumber = env.BUILD_NUMBER
                 def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                 def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green': 'red'
                 def body = """
                 <html>
                 <body>
                 <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                 <h2>${jobName} - Build ${buildNumber}</h2>
                 <div style="background-color: ${bannerColor}; padding: 10px;">
                 <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                 </div>
                 <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                 </div>
                 </body>
                 </html>
             """
                 emailext (
                     subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                     body: body,
                     to: 'shubhamtaware2001@gmail.com',
                     from: 'shubham.ajspire@gmail.com',
                     replyTo: 'shubham.ajspire@gmail.com',
                     mimeType: 'text/html',
                     attachmentsPattern: 'trivy-image-report.html'
                 )
             }
         }
     }
 }
 pipeline {
     agent any
     tools {
         jdk 'jdk17'
         maven 'maven3'
     }
     environment {
         SCANNER_HOME = tool 'sonar-scanner'
     }
     stages {
         stage('Git Checkout') {
             steps {
                 git branch: 'main', credentialsId: 'github', url: 'https://github.com/shubzz-t/Blogging_App_Java.git'
             }
         }
         stage('Compile') {
             steps {
                 sh "mvn compile"
             }
         }
         stage('Test') {
             steps {
                 sh "mvn test"
             }
         }
         stage('File System Scan') {
             steps {
                 sh "trivy fs --format table -o trivy-fs-report.html ."
             }
         }
         stage('SonarQube Analysis') {
             steps {
                 withSonarQubeEnv('sonar-server') {
                     sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Blogging-App -Dsonar.projectKey=Blogging-App \
                             -Dsonar.java.binaries=target '''
                 }
             }
         }
         stage('Quality Gate') {
             steps {
                 script {
                     waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                 }
             }
         }
         stage('Build') {
             steps {
                 sh "mvn package"
             }
         }
         stage('Publish To Nexus') {
             steps {
                 withMaven(globalMavenSettingsConfig: 'global-settings', jdk: 'jdk17', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                     sh "mvn deploy"
                 }
             }
         }
         stage('Build & Tag Docker Image') {
             steps {
                 script {
                     withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                         sh "docker build -t shubzz/blogging-app:latest ."
                     }
                 }
             }
         }
         stage('Docker Image Scan') {
             steps {
                 sh "trivy image --format table -o trivy-image-report.html shubzz/blogging-app:latest "
             }
         }

         stage('Push Docker Image') {
             steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                             sh "docker push shubzz/blogging-app:latest"
                     }
                }
             }
         }

         stage('Deploy to K8S'){
             steps{
                 withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://99A9506919BFC33E6952F062312B02F4.sk1.ap-south-1.eks.amazonaws.com') {
                     sh "kubectl apply -f deployment-service.yml"
                     sh "sleep 10"
                 }
             }
         }

         stage('Verify Deployment'){
             steps{
                 withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8s-cred', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://99A9506919BFC33E6952F062312B02F4.sk1.ap-south-1.eks.amazonaws.com') {
                     sh "kubectl get pods -n webapps"
                     sh "kubectl get svc -n webapps"
                 }
             }
         }

     }
     post {
         always {
             script {
                 def jobName = env.JOB_NAME
                 def buildNumber = env.BUILD_NUMBER
                 def pipelineStatus = currentBuild.result ?: 'UNKNOWN'
                 def bannerColor = pipelineStatus.toUpperCase() == 'SUCCESS' ? 'green': 'red'
                 def body = """
                 <html>
                 <body>
                 <div style="border: 4px solid ${bannerColor}; padding: 10px;">
                 <h2>${jobName} - Build ${buildNumber}</h2>
                 <div style="background-color: ${bannerColor}; padding: 10px;">
                 <h3 style="color: white;">Pipeline Status: ${pipelineStatus.toUpperCase()}</h3>
                 </div>
                 <p>Check the <a href="${BUILD_URL}">console output</a>.</p>
                 </div>
                 </body>
                 </html>
             """
                 emailext (
                     subject: "${jobName} - Build ${buildNumber} - ${pipelineStatus.toUpperCase()}",
                     body: body,
                     to: 'shubhamtaware2001@gmail.com',
                     from: 'shubham.ajspire@gmail.com',
                     replyTo: 'shubham.ajspire@gmail.com',
                     mimeType: 'text/html',
                     attachmentsPattern: 'trivy-image-report.html'
                 )
             }
         }
     }
 }

